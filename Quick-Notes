____________________________________________________________________
            Collection of Examples of code in JS  
____________________________________________________________________

Deconstruction:
----*
const hero = {
  name: 'Batman',
  realName: 'Bruce Wayne'
};

const { name, realName } = hero;

name;     // => 'Batman',
realName; // => 'Bruce Wayne'

--
const name     = hero.name;
const realName = hero.realName;

// is equivalent to:

const { name, realName } = hero;
----*

Sort Array:
----*
let example = [
  ['harry class', 4],
  ['harrold class', 8],
  ['henry class', 3],
  ['horehay class', 10]
  
]

const sortedActivities = example.sort((a, b) => b[1] - a[1])
----*

findIndex(): This one is to find the index of an object in an array based on some value.
Notes: While this is good when needed, using a loop might be faster for a really
big array. Loop being roughly 7-8 times faster.
----*
a = [
  {prop1:"abc",prop2:"qwe"},
  {prop1:"bnmb",prop2:"yutu"},
  {prop1:"zxvz",prop2:"qwrq"}];
    
index = a.findIndex(x => x.prop2 ==="yutu");

console.log(index);
----*

Quicksort:
----
var items = [5,3,7,6,2,9];
function swap(items, leftIndex, rightIndex){
    var temp = items[leftIndex];
    items[leftIndex] = items[rightIndex];
    items[rightIndex] = temp;
}
function partition(items, left, right) {
    var pivot   = items[Math.floor((right + left) / 2)], //middle element
        i       = left, //left pointer
        j       = right; //right pointer
    while (i <= j) {
        while (items[i] < pivot) {
            i++;
        }
        while (items[j] > pivot) {
            j--;
        }
        if (i <= j) {
            swap(items, i, j); //sawpping two elements
            i++;
            j--;
        }
    }
    return i;
}

function quickSort(items, left, right) {
    var index;
    if (items.length > 1) {
        index = partition(items, left, right); //index returned from partition
        if (left < index - 1) { //more elements on the left side of the pivot
            quickSort(items, left, index - 1);
        }
        if (index < right) { //more elements on the right side of the pivot
            quickSort(items, index, right);
        }
    }
    return items;
}
// first call to quick sort
var sortedArray = quickSort(items, 0, items.length - 1);
console.log(sortedArray); //prints [2,3,5,6,7,9]
-----
